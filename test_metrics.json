{
  "metrics": {
    "coverage_rate": 100.0,
    "success_rate": 77.77777777777779,
    "partial_success_rate": 0.0
  },
  "status": "success",
  "model_name": "gpt-4o",
  "timestamp": "2025-01-20T22:40:32.199979",
  "results": [
    {
      "test_name": "tests/test_code_generation.py::test_function_implementation",
      "outcome": "passed",
      "error_message": null,
      "duration": 5.129848862000003,
      "timestamp": "2025-01-20T22:40:08.377746"
    },
    {
      "test_name": "tests/test_code_generation.py::test_algorithm_solutions",
      "outcome": "failed",
      "error_message": "llm_client = <coroutine object llm_client at 0x7f2e2e64c9c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f2e2e6e9ee0>\n\n    @pytest.mark.asyncio\n    async def test_algorithm_solutions(llm_client, db_session):\n        \"\"\"Test implementation of common algorithms.\"\"\"\n        client = await llm_client\n    \n        algorithms = [\n            {\n                \"name\": \"Binary Search\",\n                \"prompt\": \"\"\"\n                Implement a binary search function in Python that finds the index of a\n                target value in a sorted list. Return -1 if the target is not found.\n                Return the code in a Python code block.\n                \"\"\",\n                \"requirements\": [\n                    \"Input validation\",\n                    \"Handle empty list\",\n                    \"Return correct index\",\n                    \"Return -1 if not found\"\n                ]\n            },\n            {\n                \"name\": \"Merge Sort\",\n                \"prompt\": \"\"\"\n                Implement the merge sort algorithm in Python to sort a list of numbers\n                in ascending order. Return the code in a Python code block.\n                \"\"\",\n                \"requirements\": [\n                    \"Divide and conquer approach\",\n                    \"Merge function\",\n                    \"Handle empty or single-element lists\",\n                    \"Maintain stable sort\"\n                ]\n            }\n        ]\n    \n        for algo in algorithms:\n            response = await client.generate(\n                prompt=algo[\"prompt\"],\n                max_tokens=500,\n                temperature=0.0\n            )\n    \n            raw_code = response[\"choices\"][0][\"text\"].strip()\n            code = extract_code_block(raw_code)\n    \n            # Verify syntax\n            try:\n                ast.parse(code)\n            except SyntaxError as e:\n                pytest.fail(f\"Generated {algo['name']} code has syntax error: {e}\\nCode:\\n{code}\")\n    \n            # Check for algorithm-specific requirements\n            for req in algo[\"requirements\"]:\n>               assert any(keyword in code.lower() for keyword in req.lower().split()), \\\n                    f\"Missing requirement: {req}\"\nE               AssertionError: Missing requirement: Input validation\nE               assert False\nE                +  where False = any(<generator object test_algorithm_solutions.<locals>.<genexpr> at 0x7f2e2e23dcf0>)\n\ntests/test_code_generation.py:138: AssertionError",
      "duration": 2.8376613789999965,
      "timestamp": "2025-01-20T22:40:11.260316"
    },
    {
      "test_name": "tests/test_code_generation.py::test_code_refactoring",
      "outcome": "passed",
      "error_message": null,
      "duration": 3.163576760000012,
      "timestamp": "2025-01-20T22:40:14.425575"
    },
    {
      "test_name": "tests/test_code_generation.py::test_error_handling",
      "outcome": "failed",
      "error_message": "llm_client = <coroutine object llm_client at 0x7f2e2e64c6c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f2e2e6e9ee0>\n\n    @pytest.mark.asyncio\n    async def test_error_handling(llm_client, db_session):\n        \"\"\"Test generation of code with proper error handling.\"\"\"\n        client = await llm_client\n    \n        prompt = \"\"\"\n        Write a Python function that reads a JSON file and extracts specific fields.\n        The function should handle all possible errors (file not found, invalid JSON,\n        missing fields) gracefully. Return the code in a Python code block.\n        \"\"\"\n    \n        response = await client.generate(\n            prompt=prompt,\n            max_tokens=400,\n            temperature=0.0\n        )\n    \n        raw_code = response[\"choices\"][0][\"text\"].strip()\n        code = extract_code_block(raw_code)\n    \n        # Verify syntax first\n        try:\n            ast.parse(code)\n        except SyntaxError as e:\n            pytest.fail(f\"Generated code has syntax error: {e}\\nCode:\\n{code}\")\n    \n        # Check for error handling constructs\n        required_elements = [\n            \"try:\",\n            \"except\",\n            \"FileNotFoundError\",\n            \"json.JSONDecodeError\",\n            \"raise\"\n        ]\n    \n        for element in required_elements:\n>           assert element in code, f\"Missing error handling element: {element}\"\nE           AssertionError: Missing error handling element: raise\nE           assert 'raise' in 'import json\\n\\ndef extract_fields_from_json(file_path, fields):\\n    \"\"\"\\n    Reads a JSON file and extracts specific fields.\\n\\n    :param file_path: Path to the JSON file.\\n    :param fields: List of fields to extract from the JSON data.\\n    :return: Dictionary with the extracted fields and their values, or an error message.\\n    \"\"\"\\n    try:\\n        with open(file_path, \\'r\\', encoding=\\'utf-8\\') as file:\\n            try:\\n                data = json.load(file)\\n            except json.JSONDecodeError:\\n                return {\"error\": \"Invalid JSON format.\"}\\n\\n        extracted_data = {}\\n        for field in fields:\\n            if field in data:\\n                extracted_data[field] = data[field]\\n            else:\\n                extracted_data[field] = \"Field not found.\"\\n\\n        return extracted_data\\n\\n    except FileNotFoundError:\\n        return {\"error\": \"File not found.\"}\\n    except Exception as e:\\n        return {\"error\": f\"An unexpected error occurred: {str(e)}\"}\\n\\n# Example usage:\\n# result = extract_fields_from_json(\\'data.json\\', [\\'name\\', \\'age\\', \\'email\\'])\\n# print(result)'\n\ntests/test_code_generation.py:238: AssertionError",
      "duration": 5.67220497400001,
      "timestamp": "2025-01-20T22:40:20.104726"
    },
    {
      "test_name": "tests/test_few_shot.py::test_sentiment_analysis",
      "outcome": "passed",
      "error_message": null,
      "duration": 1.0415060370000049,
      "timestamp": "2025-01-20T22:40:21.148051"
    },
    {
      "test_name": "tests/test_few_shot.py::test_topic_classification",
      "outcome": "passed",
      "error_message": null,
      "duration": 1.5334692749999874,
      "timestamp": "2025-01-20T22:40:22.683239"
    },
    {
      "test_name": "tests/test_few_shot.py::test_intent_classification",
      "outcome": "passed",
      "error_message": null,
      "duration": 1.9720758470000135,
      "timestamp": "2025-01-20T22:40:24.657187"
    },
    {
      "test_name": "tests/test_few_shot.py::test_entity_extraction",
      "outcome": "passed",
      "error_message": null,
      "duration": 1.0950279900000055,
      "timestamp": "2025-01-20T22:40:25.753967"
    },
    {
      "test_name": "tests/test_mathematics.py::test_arithmetic_operations",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.853594094000016,
      "timestamp": "2025-01-20T22:40:26.609387"
    },
    {
      "test_name": "tests/test_mathematics.py::test_word_problems",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.43395035100002133,
      "timestamp": "2025-01-20T22:40:27.056529"
    },
    {
      "test_name": "tests/test_mathematics.py::test_basic_algebra",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.3081441799999993,
      "timestamp": "2025-01-20T22:40:27.371790"
    },
    {
      "test_name": "tests/test_mathematics.py::test_mathematical_reasoning",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.31807804599998235,
      "timestamp": "2025-01-20T22:40:27.695769"
    },
    {
      "test_name": "tests/test_reasoning.py::test_logical_deduction",
      "outcome": "failed",
      "error_message": "llm_client = <coroutine object llm_client at 0x7f2e2e46dc40>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f2e2e6e9ee0>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f2e2e341310>\n\n    @pytest.mark.asyncio\n    async def test_logical_deduction(llm_client, db_session, make_test_suite):\n        \"\"\"Test logical deduction capabilities.\"\"\"\n        client = await llm_client\n    \n        suite = make_test_suite(\n            name_prefix=\"logical_deduction\",\n            description=\"Tests for logical deduction\",\n            category=\"reasoning\"\n        )\n    \n        premises = \"\"\"\n        1. All programmers like coffee\n        2. Some coffee drinkers work at night\n        3. Alice is a programmer\n        \"\"\"\n    \n        questions = [\n            {\n                \"query\": \"Does Alice like coffee?\",\n                \"expected_keywords\": [\"yes\", \"true\", \"likes\", \"does\"]\n            },\n            {\n                \"query\": \"Do all programmers work at night?\",\n                \"expected_keywords\": [\"cannot\", \"unknown\", \"insufficient\", \"maybe\"]\n            }\n        ]\n    \n        for i, question in enumerate(questions):\n            test = UnitTest(\n                test_id=uuid.uuid4(),\n                suite_id=suite.suite_id,\n                test_name=f\"Deduction Test {i+1}\",\n                test_type=\"logical_deduction\",\n                input_data={\n                    \"premises\": premises,\n                    \"question\": question[\"query\"]\n                },\n                expected_output={\"keywords\": question[\"expected_keywords\"]}\n            )\n            db_session.add(test)\n        db_session.commit()\n    \n        for question in questions:\n            prompt = f\"\"\"\n            Given these premises:\n            {premises}\n    \n            Question: {question[\"query\"]}\n            Provide a direct answer without explanation.\n            \"\"\"\n    \n            response = await client.generate(\n                prompt=prompt,\n                max_tokens=50,\n                temperature=0.0\n            )\n    \n            answer = response[\"choices\"][0][\"text\"].strip().lower()\n>           assert any(keyword in answer for keyword in question[\"expected_keywords\"]), \\\n                f\"Answer '{answer}' does not contain any expected keywords: {question['expected_keywords']}\"\nE           AssertionError: Answer 'no.' does not contain any expected keywords: ['cannot', 'unknown', 'insufficient', 'maybe']\nE           assert False\nE            +  where False = any(<generator object test_logical_deduction.<locals>.<genexpr> at 0x7f2e2e46e7b0>)\n\ntests/test_reasoning.py:68: AssertionError",
      "duration": 0.8192753649999815,
      "timestamp": "2025-01-20T22:40:28.528696"
    },
    {
      "test_name": "tests/test_reasoning.py::test_cause_effect_analysis",
      "outcome": "passed",
      "error_message": null,
      "duration": 1.6738727400000073,
      "timestamp": "2025-01-20T22:40:30.208580"
    },
    {
      "test_name": "tests/test_reasoning.py::test_analogical_reasoning",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.43847751900000276,
      "timestamp": "2025-01-20T22:40:30.652803"
    },
    {
      "test_name": "tests/test_summarization.py::test_article_summarization",
      "outcome": "failed",
      "error_message": "llm_client = <coroutine object llm_client at 0x7f2e2e46dd40>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f2e2e6e9ee0>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f2e2e341f70>\n\n    @pytest.mark.asyncio\n    async def test_article_summarization(llm_client, db_session, make_test_suite):\n        \"\"\"Test article summarization capabilities.\"\"\"\n        # Need to await our async fixture\n        client = await llm_client\n    \n        # Create a uniquely named test suite\n        suite = make_test_suite(\n            name_prefix=\"summarization\",\n            description=\"Tests for text summarization capabilities\",\n            category=\"summarization\"\n        )\n    \n        # Test article\n        article = \"\"\"\n        The James Webb Space Telescope has revolutionized our view of the cosmos.\n        Launched in December 2021, this $10 billion observatory has provided\n        unprecedented views of distant galaxies, star-forming regions, and\n        exoplanets. Its infrared capabilities allow it to peer through cosmic\n        dust and see light from the earliest galaxies in the universe.\n        \"\"\"\n    \n        # Define expected key points\n        key_points = [\n            \"James Webb Space Telescope\",\n            \"launched December 2021\",\n            \"infrared observation\",\n            \"galaxies and exoplanets\"\n        ]\n    \n        # Create test case in database\n        test_case = UnitTest(\n            test_id=uuid.uuid4(),\n            suite_id=suite.suite_id,\n            test_name=\"Article Summarization\",\n            test_type=\"summarization\",\n            test_description=\"Test summarization of a scientific article\",\n            input_data={\"article\": article},\n            expected_output={\"key_points\": key_points}\n        )\n        db_session.add(test_case)\n        db_session.commit()\n    \n        # Get summary from model\n        response = await client.generate(\n            prompt=f\"Please summarize this article concisely: {article}\",\n            max_tokens=100,\n            temperature=0.3\n        )\n    \n        summary = response[\"choices\"][0][\"text\"].strip()\n    \n        # Check if key points are present\n        for point in key_points:\n>           assert point.lower() in summary.lower(), f\"Missing key point: {point}\"\nE           AssertionError: Missing key point: launched December 2021\nE           assert 'launched december 2021' in 'the james webb space telescope, launched in december 2021 at a cost of $10 billion, has transformed our understanding of the universe. its infrared capabilities offer unprecedented views of distant galaxies, star-forming regions, and exoplanets by penetrating cosmic dust and observing light from the earliest galaxies.'\nE            +  where 'launched december 2021' = <built-in method lower of str object at 0x7f2e2e6f22b0>()\nE            +    where <built-in method lower of str object at 0x7f2e2e6f22b0> = 'launched December 2021'.lower\nE            +  and   'the james webb space telescope, launched in december 2021 at a cost of $10 billion, has transformed our understanding of the universe. its infrared capabilities offer unprecedented views of distant galaxies, star-forming regions, and exoplanets by penetrating cosmic dust and observing light from the earliest galaxies.' = <built-in method lower of str object at 0x7f2e2e8c8e90>()\nE            +    where <built-in method lower of str object at 0x7f2e2e8c8e90> = 'The James Webb Space Telescope, launched in December 2021 at a cost of $10 billion, has transformed our understanding of the universe. Its infrared capabilities offer unprecedented views of distant galaxies, star-forming regions, and exoplanets by penetrating cosmic dust and observing light from the earliest galaxies.'.lower\n\ntests/test_summarization.py:64: AssertionError",
      "duration": 1.5259851179999941,
      "timestamp": "2025-01-20T22:40:32.190363"
    },
    {
      "test_name": "tests/test_summarization.py::test_multi_document_summarization",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.0002298490000214315,
      "timestamp": "2025-01-20T22:40:32.197082"
    },
    {
      "test_name": "tests/test_summarization.py::test_bullet_point_extraction",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.00021513100000447594,
      "timestamp": "2025-01-20T22:40:32.198449"
    }
  ]
}