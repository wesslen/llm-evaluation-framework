{
  "metrics": {
    "coverage_rate": 100.0,
    "success_rate": 11.11111111111111,
    "partial_success_rate": 0.0
  },
  "status": "success",
  "model_name": "accounts/fireworks/models/llama-v3p1-70b-instruct",
  "timestamp": "2025-01-20T22:23:48.878587",
  "results": [
    {
      "test_name": "tests/test_code_generation.py::test_function_implementation",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7bbba550>,)\nkwargs = {'max_tokens': 300, 'prompt': \"\\n            Write a Python function called 'fibonacci' that returns the nth number \\n...on should handle inputs n \u2265 1.\\n            Return the code in a Python code block.\\n            \", 'temperature': 0.0}\nretry_state = <RetryCallState 140030894647952: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b95b370>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7bb0b740>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\n\n    @pytest.mark.asyncio\n    async def test_function_implementation(llm_client, db_session):\n        \"\"\"Test implementation of basic functions.\"\"\"\n        client = await llm_client\n    \n        test_cases = [\n            {\n                \"prompt\": \"\"\"\n                Write a Python function called 'fibonacci' that returns the nth number\n                in the Fibonacci sequence. The function should handle inputs n \u2265 1.\n                Return the code in a Python code block.\n                \"\"\",\n                \"test_inputs\": [1, 2, 3, 4, 5, 6],\n                \"expected_outputs\": [1, 1, 2, 3, 5, 8],\n                \"required_elements\": [\"def fibonacci\", \"return\"]\n            },\n            {\n                \"prompt\": \"\"\"\n                Write a Python function called 'is_palindrome' that checks if a string\n                is a palindrome (reads the same forwards and backwards). The function\n                should ignore spaces and be case-insensitive.\n                Return the code in a Python code block.\n                \"\"\",\n                \"test_inputs\": [\"radar\", \"A man a plan a canal Panama\", \"hello\"],\n                \"expected_outputs\": [True, True, False],\n                \"required_elements\": [\"def is_palindrome\", \"return\", \"lower()\"]\n            }\n        ]\n    \n        for case in test_cases:\n>           response = await client.generate(\n                prompt=case[\"prompt\"],\n                max_tokens=300,\n                temperature=0.0\n            )\n\ntests/test_code_generation.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030894647952: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b9432b0 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.5285790049999974,
      "timestamp": "2025-01-20T22:22:59.801566"
    },
    {
      "test_name": "tests/test_code_generation.py::test_algorithm_solutions",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b9055e0>,)\nkwargs = {'max_tokens': 500, 'prompt': '\\n            Implement a binary search function in Python that finds the index of a \\n...-1 if the target is not found.\\n            Return the code in a Python code block.\\n            ', 'temperature': 0.0}\nretry_state = <RetryCallState 140030891807984: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b768580>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b8ab4c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\n\n    @pytest.mark.asyncio\n    async def test_algorithm_solutions(llm_client, db_session):\n        \"\"\"Test implementation of common algorithms.\"\"\"\n        client = await llm_client\n    \n        algorithms = [\n            {\n                \"name\": \"Binary Search\",\n                \"prompt\": \"\"\"\n                Implement a binary search function in Python that finds the index of a\n                target value in a sorted list. Return -1 if the target is not found.\n                Return the code in a Python code block.\n                \"\"\",\n                \"requirements\": [\n                    \"Input validation\",\n                    \"Handle empty list\",\n                    \"Return correct index\",\n                    \"Return -1 if not found\"\n                ]\n            },\n            {\n                \"name\": \"Merge Sort\",\n                \"prompt\": \"\"\"\n                Implement the merge sort algorithm in Python to sort a list of numbers\n                in ascending order. Return the code in a Python code block.\n                \"\"\",\n                \"requirements\": [\n                    \"Divide and conquer approach\",\n                    \"Merge function\",\n                    \"Handle empty or single-element lists\",\n                    \"Maintain stable sort\"\n                ]\n            }\n        ]\n    \n        for algo in algorithms:\n>           response = await client.generate(\n                prompt=algo[\"prompt\"],\n                max_tokens=500,\n                temperature=0.0\n            )\n\ntests/test_code_generation.py:121: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030891807984: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b768310 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2855231850000024,
      "timestamp": "2025-01-20T22:23:03.122963"
    },
    {
      "test_name": "tests/test_code_generation.py::test_code_refactoring",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b916940>,)\nkwargs = {'max_tokens': 400, 'prompt': '\\n    Refactor this code to improve readability and efficiency. The code should:\\n    1...[i] < 100:\\n                        result.append(data[i] * 2)\\n        return result\\n    \\n    ', 'temperature': 0.0}\nretry_state = <RetryCallState 140030891879104: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b8ca2b0>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b802f40>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\n\n    @pytest.mark.asyncio\n    async def test_code_refactoring(llm_client, db_session):\n        \"\"\"Test code refactoring capabilities.\"\"\"\n        client = await llm_client\n    \n        original_code = \"\"\"\n        def process_data(data):\n            result = []\n            for i in range(len(data)):\n                if data[i] > 0:\n                    if data[i] % 2 == 0:\n                        if data[i] < 100:\n                            result.append(data[i] * 2)\n            return result\n        \"\"\"\n    \n        refactor_prompt = f\"\"\"\n        Refactor this code to improve readability and efficiency. The code should:\n        1. Use list comprehension\n        2. Reduce nesting\n        3. Add type hints\n        4. Add docstring\n    \n        Return the refactored code in a Python code block.\n    \n        Original code:\n        {original_code}\n        \"\"\"\n    \n>       response = await client.generate(\n            prompt=refactor_prompt,\n            max_tokens=400,\n            temperature=0.0\n        )\n\ntests/test_code_generation.py:170: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030891879104: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b8a7af0 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.230417443999997,
      "timestamp": "2025-01-20T22:23:06.388823"
    },
    {
      "test_name": "tests/test_code_generation.py::test_error_handling",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b67a250>,)\nkwargs = {'max_tokens': 400, 'prompt': '\\n    Write a Python function that reads a JSON file and extracts specific fields. \\n  ...nd, invalid JSON, \\n    missing fields) gracefully. Return the code in a Python code block.\\n    ', 'temperature': 0.0}\nretry_state = <RetryCallState 140030889141728: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b8a7f40>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b802c40>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\n\n    @pytest.mark.asyncio\n    async def test_error_handling(llm_client, db_session):\n        \"\"\"Test generation of code with proper error handling.\"\"\"\n        client = await llm_client\n    \n        prompt = \"\"\"\n        Write a Python function that reads a JSON file and extracts specific fields.\n        The function should handle all possible errors (file not found, invalid JSON,\n        missing fields) gracefully. Return the code in a Python code block.\n        \"\"\"\n    \n>       response = await client.generate(\n            prompt=prompt,\n            max_tokens=400,\n            temperature=0.0\n        )\n\ntests/test_code_generation.py:213: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030889141728: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7bb29850 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2243982009999996,
      "timestamp": "2025-01-20T22:23:09.670741"
    },
    {
      "test_name": "tests/test_few_shot.py::test_sentiment_analysis",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b7637f0>,)\nkwargs = {'max_tokens': 50, 'prompt': \"Classify the sentiment of the following text as positive, negative, or neutral:\\n\\nText:...: neutral\\n\\nText: While it has some flaws, I'm generally satisfied with my purchase.\\nSentiment:\", 'temperature': 0.3}\nretry_state = <RetryCallState 140030890097536: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b819e20>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b82a2c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\n\n    @pytest.mark.asyncio\n    async def test_sentiment_analysis(llm_client, db_session):\n        \"\"\"Test sentiment analysis with few-shot examples.\"\"\"\n        client = await llm_client\n    \n        examples = [\n            {\"text\": \"This product exceeded my expectations!\", \"sentiment\": \"positive\"},\n            {\"text\": \"I regret buying this, complete waste of money.\", \"sentiment\": \"negative\"},\n            {\"text\": \"It works as advertised, nothing special.\", \"sentiment\": \"neutral\"}\n        ]\n    \n        test_cases = [\n            {\n                \"text\": \"While it has some flaws, I'm generally satisfied with my purchase.\",\n                \"expected\": \"positive\"\n            },\n            {\n                \"text\": \"Don't bother with this one, seriously disappointed.\",\n                \"expected\": \"negative\"\n            },\n            {\n                \"text\": \"Does what it says on the tin.\",\n                \"expected\": \"neutral\"\n            }\n        ]\n    \n        # Create few-shot prompt\n        few_shot_prompt = \"Classify the sentiment of the following text as positive, negative, or neutral:\\n\\n\"\n        for example in examples:\n            few_shot_prompt += f\"Text: {example['text']}\\nSentiment: {example['sentiment']}\\n\\n\"\n    \n        for case in test_cases:\n            prompt = few_shot_prompt + f\"Text: {case['text']}\\nSentiment:\"\n    \n>           response = await client.generate(\n                prompt=prompt,\n                max_tokens=50,\n                temperature=0.3\n            )\n\ntests/test_few_shot.py:44: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030890097536: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b67a880 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2276442349999996,
      "timestamp": "2025-01-20T22:23:12.930586"
    },
    {
      "test_name": "tests/test_few_shot.py::test_topic_classification",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b8ca580>,)\nkwargs = {'max_tokens': 50, 'prompt': 'Classify the topic of the following text as science, sports, or technology:\\n\\nText: Sci...hnology\\nTopic: technology\\n\\nText: Researchers develop breakthrough in quantum computing\\nTopic:', 'temperature': 0.3}\nretry_state = <RetryCallState 140030891566032: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b6cad90>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b90eb40>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\n\n    @pytest.mark.asyncio\n    async def test_topic_classification(llm_client, db_session):\n        \"\"\"Test topic classification with few-shot examples.\"\"\"\n        client = await llm_client\n    \n        examples = [\n            {\n                \"text\": \"Scientists discover new exoplanet in nearby solar system\",\n                \"topic\": \"science\"\n            },\n            {\n                \"text\": \"Local team wins championship in dramatic final\",\n                \"topic\": \"sports\"\n            },\n            {\n                \"text\": \"New smartphone features revolutionary camera technology\",\n                \"topic\": \"technology\"\n            }\n        ]\n    \n        test_articles = [\n            {\n                \"text\": \"Researchers develop breakthrough in quantum computing\",\n                \"expected\": \"technology\"\n            },\n            {\n                \"text\": \"Study reveals new insights into black hole formation\",\n                \"expected\": \"science\"\n            },\n            {\n                \"text\": \"Player breaks record for most goals in a season\",\n                \"expected\": \"sports\"\n            }\n        ]\n    \n        # Create few-shot prompt\n        few_shot_prompt = \"Classify the topic of the following text as science, sports, or technology:\\n\\n\"\n        for example in examples:\n            few_shot_prompt += f\"Text: {example['text']}\\nTopic: {example['topic']}\\n\\n\"\n    \n        for article in test_articles:\n            prompt = few_shot_prompt + f\"Text: {article['text']}\\nTopic:\"\n    \n>           response = await client.generate(\n                prompt=prompt,\n                max_tokens=50,\n                temperature=0.3\n            )\n\ntests/test_few_shot.py:96: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030891566032: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7bb34eb0 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.250553487999994,
      "timestamp": "2025-01-20T22:23:16.213143"
    },
    {
      "test_name": "tests/test_few_shot.py::test_intent_classification",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b916130>,)\nkwargs = {'max_tokens': 50, 'prompt': \"Classify the user intent as check_status, return_request, or shipping_inquiry:\\n\\nQuery:...nternational locations?\\nIntent: shipping_inquiry\\n\\nQuery: When will my package arrive?\\nIntent:\", 'temperature': 0.3}\nretry_state = <RetryCallState 140030891880256: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b93a6a0>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b71d7c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\n\n    @pytest.mark.asyncio\n    async def test_intent_classification(llm_client, db_session):\n        \"\"\"Test user intent classification with few-shot examples.\"\"\"\n        client = await llm_client\n    \n        examples = [\n            {\n                \"text\": \"What's the current status of my order?\",\n                \"intent\": \"check_status\"\n            },\n            {\n                \"text\": \"I need to return this product\",\n                \"intent\": \"return_request\"\n            },\n            {\n                \"text\": \"Do you ship to international locations?\",\n                \"intent\": \"shipping_inquiry\"\n            }\n        ]\n    \n        test_queries = [\n            {\n                \"text\": \"When will my package arrive?\",\n                \"expected\": \"check_status\"\n            },\n            {\n                \"text\": \"How do I send this item back?\",\n                \"expected\": \"return_request\"\n            },\n            {\n                \"text\": \"Can you deliver to Canada?\",\n                \"expected\": \"shipping_inquiry\"\n            }\n        ]\n    \n        # Create few-shot prompt\n        few_shot_prompt = \"Classify the user intent as check_status, return_request, or shipping_inquiry:\\n\\n\"\n        for example in examples:\n            few_shot_prompt += f\"Query: {example['text']}\\nIntent: {example['intent']}\\n\\n\"\n    \n        for query in test_queries:\n            prompt = few_shot_prompt + f\"Query: {query['text']}\\nIntent:\"\n    \n>           response = await client.generate(\n                prompt=prompt,\n                max_tokens=50,\n                temperature=0.3\n            )\n\ntests/test_few_shot.py:149: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030891880256: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b8b1520 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2439555640000037,
      "timestamp": "2025-01-20T22:23:19.489236"
    },
    {
      "test_name": "tests/test_few_shot.py::test_entity_extraction",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b6778e0>,)\nkwargs = {'max_tokens': 150, 'prompt': 'Extract the person, organization, and location from the text:\\n\\nText: John Smith works...osoft\",\\n  \"location\": \"London\"\\n}\\n\\nText: Amazon founder Jeff Bezos spoke in Seattle\\nEntities:', 'temperature': 0.3}\nretry_state = <RetryCallState 140030889166544: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b820730>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b71d740>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\n\n    @pytest.mark.asyncio\n    async def test_entity_extraction(llm_client, db_session):\n        \"\"\"Test named entity extraction with few-shot examples.\"\"\"\n        client = await llm_client\n    \n        examples = [\n            {\n                \"text\": \"John Smith works at Apple Inc. in California\",\n                \"entities\": {\n                    \"person\": \"John Smith\",\n                    \"organization\": \"Apple Inc.\",\n                    \"location\": \"California\"\n                }\n            },\n            {\n                \"text\": \"Microsoft CEO Satya Nadella visited London\",\n                \"entities\": {\n                    \"person\": \"Satya Nadella\",\n                    \"organization\": \"Microsoft\",\n                    \"location\": \"London\"\n                }\n            }\n        ]\n    \n        test_cases = [\n            {\n                \"text\": \"Amazon founder Jeff Bezos spoke in Seattle\",\n                \"expected\": {\n                    \"person\": \"Jeff Bezos\",\n                    \"organization\": \"Amazon\",\n                    \"location\": \"Seattle\"\n                }\n            }\n        ]\n    \n        # Create few-shot prompt\n        few_shot_prompt = \"Extract the person, organization, and location from the text:\\n\\n\"\n        for example in examples:\n            few_shot_prompt += f\"Text: {example['text']}\\n\"\n            few_shot_prompt += f\"Entities: {json.dumps(example['entities'], indent=2)}\\n\\n\"\n    \n        for case in test_cases:\n            prompt = few_shot_prompt + f\"Text: {case['text']}\\nEntities:\"\n    \n>           response = await client.generate(\n                prompt=prompt,\n                max_tokens=150,\n                temperature=0.3\n            )\n\ntests/test_few_shot.py:203: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030889166544: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b899c70 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2602413039999902,
      "timestamp": "2025-01-20T22:23:22.783096"
    },
    {
      "test_name": "tests/test_mathematics.py::test_arithmetic_operations",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7bba7df0>,)\nkwargs = {'max_tokens': 50, 'prompt': 'What is the result of multiplying 23.5 by 8.75? Provide only the numerical answer without any explanation.', 'temperature': 0.0}\nretry_state = <RetryCallState 140030892159232: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b707c40>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b9137c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f5b7b8831f0>\n\n    @pytest.mark.asyncio\n    async def test_arithmetic_operations(llm_client, db_session, make_test_suite):\n        \"\"\"Test basic arithmetic operations.\"\"\"\n        client = await llm_client\n    \n        suite = make_test_suite(\n            name_prefix=\"arithmetic\",\n            description=\"Tests for basic arithmetic operations\",\n            category=\"mathematics\"\n        )\n    \n        test_cases = [\n            {\n                \"prompt\": \"What is the result of multiplying 23.5 by 8.75?\",\n                \"expected\": 205.625\n            },\n            {\n                \"prompt\": \"What is 1234 divided by 56.5?\",\n                \"expected\": 21.84070796460177\n            }\n        ]\n    \n        for i, case in enumerate(test_cases):\n            test = UnitTest(\n                test_id=uuid.uuid4(),\n                suite_id=suite.suite_id,\n                test_name=f\"Arithmetic Test {i+1}\",\n                test_type=\"arithmetic\",\n                input_data={\"prompt\": case[\"prompt\"]},\n                expected_output={\"result\": case[\"expected\"]}\n            )\n            db_session.add(test)\n        db_session.commit()\n    \n        for case in test_cases:\n>           response = await client.generate(\n                prompt=f\"{case['prompt']} Provide only the numerical answer without any explanation.\",\n                max_tokens=50,\n                temperature=0.0\n            )\n\ntests/test_mathematics.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030892159232: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b6a2580 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2316021379999995,
      "timestamp": "2025-01-20T22:23:26.052110"
    },
    {
      "test_name": "tests/test_mathematics.py::test_word_problems",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b905490>,)\nkwargs = {'max_tokens': 50, 'prompt': '\\n            A store sells notebooks for $4.50 each. If a customer buys 12 notebooks\\n ...pay in total?\\n             Provide only the numerical answer in dollars without any explanation.', 'temperature': 0.0}\nretry_state = <RetryCallState 140030891807264: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b9163d0>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b7561c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f5b7b883b80>\n\n    @pytest.mark.asyncio\n    async def test_word_problems(llm_client, db_session, make_test_suite):\n        \"\"\"Test solving mathematical word problems.\"\"\"\n        client = await llm_client\n        suite = make_test_suite(\n            name_prefix=\"word_problems\",\n            description=\"Tests for mathematical word problems\",\n            category=\"mathematics\"\n        )\n    \n        problems = [\n            {\n                \"prompt\": \"\"\"\n                A store sells notebooks for $4.50 each. If a customer buys 12 notebooks\n                and has a 20% discount coupon, how much do they pay in total?\n                \"\"\",\n                \"expected\": 43.20\n            }\n        ]\n    \n        for i, problem in enumerate(problems):\n            test = UnitTest(\n                test_id=uuid.uuid4(),\n                suite_id=suite.suite_id,\n                test_name=f\"Word Problem {i+1}\",\n                test_type=\"word_problem\",\n                input_data={\"prompt\": problem[\"prompt\"]},\n                expected_output={\"result\": problem[\"expected\"]}\n            )\n            db_session.add(test)\n        db_session.commit()\n    \n        for problem in problems:\n>           response = await client.generate(\n                prompt=f\"{problem['prompt']} Provide only the numerical answer in dollars without any explanation.\",\n                max_tokens=50,\n                temperature=0.0\n            )\n\ntests/test_mathematics.py:88: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030891807264: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b916ac0 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.243378290999999,
      "timestamp": "2025-01-20T22:23:29.366535"
    },
    {
      "test_name": "tests/test_mathematics.py::test_basic_algebra",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b8c9970>,)\nkwargs = {'max_tokens': 50, 'prompt': 'Solve for x: 3x + 7 = 22 Provide only the numerical answer without any explanation.', 'temperature': 0.0}\nretry_state = <RetryCallState 140030891562512: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b6cf040>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b67d540>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f5b7b883f70>\n\n    @pytest.mark.asyncio\n    async def test_basic_algebra(llm_client, db_session, make_test_suite):\n        \"\"\"Test basic algebraic equation solving.\"\"\"\n        client = await llm_client\n        suite = make_test_suite(\n            name_prefix=\"algebra\",\n            description=\"Tests for basic algebra\",\n            category=\"mathematics\"\n        )\n    \n        equations = [\n            {\n                \"prompt\": \"Solve for x: 3x + 7 = 22\",\n                \"expected\": 5\n            },\n            {\n                \"prompt\": \"Solve for x: 2x\u00b2 + 5x = 12\",\n                \"expected\": [1.5, -4]  # Both solutions\n            }\n        ]\n    \n        for i, eq in enumerate(equations):\n            test = UnitTest(\n                test_id=uuid.uuid4(),\n                suite_id=suite.suite_id,\n                test_name=f\"Algebra Test {i+1}\",\n                test_type=\"algebra\",\n                input_data={\"prompt\": eq[\"prompt\"]},\n                expected_output={\"result\": eq[\"expected\"]}\n            )\n            db_session.add(test)\n        db_session.commit()\n    \n        # Test first equation (single solution)\n>       response = await client.generate(\n            prompt=f\"{equations[0]['prompt']} Provide only the numerical answer without any explanation.\",\n            max_tokens=50,\n            temperature=0.0\n        )\n\ntests/test_mathematics.py:132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030891562512: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7bb27dc0 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2014167909999856,
      "timestamp": "2025-01-20T22:23:32.605269"
    },
    {
      "test_name": "tests/test_mathematics.py::test_mathematical_reasoning",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b7b7bb0>,)\nkwargs = {'max_tokens': 50, 'prompt': '\\n            If the sequence follows the pattern: 2, 6, 12, 20, 30, ...\\n            What will be the next number?\\n             Provide only the numerical answer without any explanation.', 'temperature': 0.0}\nretry_state = <RetryCallState 140030890440064: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b9438b0>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b67de40>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f5b7b6a98b0>\n\n    @pytest.mark.asyncio\n    async def test_mathematical_reasoning(llm_client, db_session, make_test_suite):\n        \"\"\"Test mathematical reasoning and logic.\"\"\"\n        client = await llm_client\n        suite = make_test_suite(\n            name_prefix=\"math_reasoning\",\n            description=\"Tests for mathematical reasoning\",\n            category=\"mathematics\"\n        )\n    \n        problems = [\n            {\n                \"prompt\": \"\"\"\n                If the sequence follows the pattern: 2, 6, 12, 20, 30, ...\n                What will be the next number?\n                \"\"\",\n                \"expected\": 42\n            }\n        ]\n    \n        for i, problem in enumerate(problems):\n            test = UnitTest(\n                test_id=uuid.uuid4(),\n                suite_id=suite.suite_id,\n                test_name=f\"Reasoning Test {i+1}\",\n                test_type=\"reasoning\",\n                input_data={\"prompt\": problem[\"prompt\"]},\n                expected_output={\"result\": problem[\"expected\"]}\n            )\n            db_session.add(test)\n        db_session.commit()\n    \n        for problem in problems:\n>           response = await client.generate(\n                prompt=f\"{problem['prompt']} Provide only the numerical answer without any explanation.\",\n                max_tokens=50,\n                temperature=0.0\n            )\n\ntests/test_mathematics.py:175: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030890440064: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7bb34a30 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.196175254999986,
      "timestamp": "2025-01-20T22:23:35.837578"
    },
    {
      "test_name": "tests/test_reasoning.py::test_logical_deduction",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7a5d8340>,)\nkwargs = {'max_tokens': 50, 'prompt': '\\n        Given these premises:\\n        \\n    1. All programmers like coffee\\n    2. So...Question: Does Alice like coffee?\\n        Provide a direct answer without explanation.\\n        ', 'temperature': 0.0}\nretry_state = <RetryCallState 140030871700816: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7a5d87c0>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b67d8c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f5b7a5e5c10>\n\n    @pytest.mark.asyncio\n    async def test_logical_deduction(llm_client, db_session, make_test_suite):\n        \"\"\"Test logical deduction capabilities.\"\"\"\n        client = await llm_client\n    \n        suite = make_test_suite(\n            name_prefix=\"logical_deduction\",\n            description=\"Tests for logical deduction\",\n            category=\"reasoning\"\n        )\n    \n        premises = \"\"\"\n        1. All programmers like coffee\n        2. Some coffee drinkers work at night\n        3. Alice is a programmer\n        \"\"\"\n    \n        questions = [\n            {\n                \"query\": \"Does Alice like coffee?\",\n                \"expected_keywords\": [\"yes\", \"true\", \"likes\", \"does\"]\n            },\n            {\n                \"query\": \"Do all programmers work at night?\",\n                \"expected_keywords\": [\"cannot\", \"unknown\", \"insufficient\", \"maybe\"]\n            }\n        ]\n    \n        for i, question in enumerate(questions):\n            test = UnitTest(\n                test_id=uuid.uuid4(),\n                suite_id=suite.suite_id,\n                test_name=f\"Deduction Test {i+1}\",\n                test_type=\"logical_deduction\",\n                input_data={\n                    \"premises\": premises,\n                    \"question\": question[\"query\"]\n                },\n                expected_output={\"keywords\": question[\"expected_keywords\"]}\n            )\n            db_session.add(test)\n        db_session.commit()\n    \n        for question in questions:\n            prompt = f\"\"\"\n            Given these premises:\n            {premises}\n    \n            Question: {question[\"query\"]}\n            Provide a direct answer without explanation.\n            \"\"\"\n    \n>           response = await client.generate(\n                prompt=prompt,\n                max_tokens=50,\n                temperature=0.0\n            )\n\ntests/test_reasoning.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030871700816: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7bb27fa0 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2409579260000214,
      "timestamp": "2025-01-20T22:23:39.114943"
    },
    {
      "test_name": "tests/test_reasoning.py::test_cause_effect_analysis",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b93a370>,)\nkwargs = {'max_tokens': 50, 'prompt': '\\n        \\n            In a city, the following events occurred:\\n            1. A majo...hat was the likely initial cause of these changes?\\n        Answer briefly in one line.\\n        ', 'temperature': 0.0}\nretry_state = <RetryCallState 140030892027616: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7b93a0a0>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b6a38c0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f5b7a5cf3a0>\n\n    @pytest.mark.asyncio\n    async def test_cause_effect_analysis(llm_client, db_session, make_test_suite):\n        \"\"\"Test cause and effect analysis.\"\"\"\n        client = await llm_client\n    \n        suite = make_test_suite(\n            name_prefix=\"cause_effect\",\n            description=\"Tests for cause and effect analysis\",\n            category=\"reasoning\"\n        )\n    \n        scenarios = [\n            {\n                \"scenario\": \"\"\"\n                In a city, the following events occurred:\n                1. A major employer relocated to the city\n                2. Housing prices increased by 25%\n                3. Traffic congestion worsened\n                4. Local businesses reported higher sales\n                \"\"\",\n                \"query\": \"What was the likely initial cause of these changes?\",\n                \"expected_phrase\": \"employer\",\n            }\n        ]\n    \n        for i, scenario in enumerate(scenarios):\n            test = UnitTest(\n                test_id=uuid.uuid4(),\n                suite_id=suite.suite_id,\n                test_name=f\"Cause Effect Test {i+1}\",\n                test_type=\"cause_effect\",\n                input_data={\n                    \"scenario\": scenario[\"scenario\"],\n                    \"question\": scenario[\"query\"]\n                },\n                expected_output={\"key_phrase\": scenario[\"expected_phrase\"]}\n            )\n            db_session.add(test)\n        db_session.commit()\n    \n        for scenario in scenarios:\n            prompt = f\"\"\"\n            {scenario['scenario']}\n    \n            {scenario['query']}\n            Answer briefly in one line.\n            \"\"\"\n    \n>           response = await client.generate(\n                prompt=prompt,\n                max_tokens=50,\n                temperature=0.0\n            )\n\ntests/test_reasoning.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030892027616: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7a5d8940 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.1881581330000017,
      "timestamp": "2025-01-20T22:23:42.340344"
    },
    {
      "test_name": "tests/test_reasoning.py::test_analogical_reasoning",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7a5ba730>,)\nkwargs = {'max_tokens': 50, 'prompt': 'Teacher is to Student as Doctor is to: Provide just the one-word answer.', 'temperature': 0.0}\nretry_state = <RetryCallState 140030871579040: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7a5ba100>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b697bc0>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f5b7a5cfb80>\n\n    @pytest.mark.asyncio\n    async def test_analogical_reasoning(llm_client, db_session, make_test_suite):\n        \"\"\"Test analogical reasoning capabilities.\"\"\"\n        client = await llm_client\n    \n        suite = make_test_suite(\n            name_prefix=\"analogical\",\n            description=\"Tests for analogical reasoning\",\n            category=\"reasoning\"\n        )\n    \n        analogies = [\n            {\n                \"prompt\": \"Teacher is to Student as Doctor is to:\",\n                \"expected\": \"patient\",\n                \"incorrect\": [\"nurse\", \"medicine\", \"hospital\"]\n            }\n        ]\n    \n        for i, analogy in enumerate(analogies):\n            test = UnitTest(\n                test_id=uuid.uuid4(),\n                suite_id=suite.suite_id,\n                test_name=f\"Analogy Test {i+1}\",\n                test_type=\"analogy\",\n                input_data={\"prompt\": analogy[\"prompt\"]},\n                expected_output={\n                    \"answer\": analogy[\"expected\"],\n                    \"incorrect\": analogy[\"incorrect\"]\n                }\n            )\n            db_session.add(test)\n        db_session.commit()\n    \n        for analogy in analogies:\n>           response = await client.generate(\n                prompt=f\"{analogy['prompt']} Provide just the one-word answer.\",\n                max_tokens=50,\n                temperature=0.0\n            )\n\ntests/test_reasoning.py:164: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030871579040: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b82caf0 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.205577247000008,
      "timestamp": "2025-01-20T22:23:45.607618"
    },
    {
      "test_name": "tests/test_summarization.py::test_article_summarization",
      "outcome": "failed",
      "error_message": "self = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nfn = <function LLMClient.generate at 0x7f5b7c9f7b80>\nargs = (<src.llm_client.LLMClient object at 0x7f5b7b6a0c40>,)\nkwargs = {'max_tokens': 100, 'prompt': 'Please summarize this article concisely: \\n    The James Webb Space Telescope has revol... to peer through cosmic\\n    dust and see light from the earliest galaxies in the universe.\\n    ', 'temperature': 0.3}\nretry_state = <RetryCallState 140030889298384: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\ndo = <tenacity.DoAttempt object at 0x7f5b7bb4c040>\n\n    async def __call__(  # type: ignore[override]\n        self, fn: WrappedFn, *args: t.Any, **kwargs: t.Any\n    ) -> WrappedFnReturnT:\n        self.begin()\n    \n        retry_state = RetryCallState(retry_object=self, fn=fn, args=args, kwargs=kwargs)\n        while True:\n            do = self.iter(retry_state=retry_state)\n            if isinstance(do, DoAttempt):\n                try:\n>                   result = await fn(*args, **kwargs)\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:50: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsrc/llm_client.py:68: in generate\n    response.raise_for_status()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [403 Forbidden]>\n\n    def raise_for_status(self) -> \"Response\":\n        \"\"\"\n        Raise the `HTTPStatusError` if one occurred.\n        \"\"\"\n        request = self._request\n        if request is None:\n            raise RuntimeError(\n                \"Cannot call `raise_for_status` as the request \"\n                \"instance has not been set on this response.\"\n            )\n    \n        if self.is_success:\n            return self\n    \n        if self.has_redirect_location:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"Redirect location: '{0.headers[location]}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n        else:\n            message = (\n                \"{error_type} '{0.status_code} {0.reason_phrase}' for url '{0.url}'\\n\"\n                \"For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/{0.status_code}\"\n            )\n    \n        status_class = self.status_code // 100\n        error_types = {\n            1: \"Informational response\",\n            3: \"Redirect response\",\n            4: \"Client error\",\n            5: \"Server error\",\n        }\n        error_type = error_types.get(status_class, \"Invalid status code\")\n        message = message.format(self, error_type=error_type)\n>       raise HTTPStatusError(message, request=request, response=self)\nE       httpx.HTTPStatusError: Client error '403 Forbidden' for url 'https://api.fireworks.ai/inferencev1/chat/completions'\nE       For more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/httpx/_models.py:758: HTTPStatusError\n\nThe above exception was the direct cause of the following exception:\n\nllm_client = <coroutine object llm_client at 0x7f5b7b901740>\ndb_session = <sqlalchemy.orm.session.Session object at 0x7f5b7bbbad60>\nmake_test_suite = <function make_test_suite.<locals>._make_suite at 0x7f5b7b772af0>\n\n    @pytest.mark.asyncio\n    async def test_article_summarization(llm_client, db_session, make_test_suite):\n        \"\"\"Test article summarization capabilities.\"\"\"\n        # Need to await our async fixture\n        client = await llm_client\n    \n        # Create a uniquely named test suite\n        suite = make_test_suite(\n            name_prefix=\"summarization\",\n            description=\"Tests for text summarization capabilities\",\n            category=\"summarization\"\n        )\n    \n        # Test article\n        article = \"\"\"\n        The James Webb Space Telescope has revolutionized our view of the cosmos.\n        Launched in December 2021, this $10 billion observatory has provided\n        unprecedented views of distant galaxies, star-forming regions, and\n        exoplanets. Its infrared capabilities allow it to peer through cosmic\n        dust and see light from the earliest galaxies in the universe.\n        \"\"\"\n    \n        # Define expected key points\n        key_points = [\n            \"James Webb Space Telescope\",\n            \"launched December 2021\",\n            \"infrared observation\",\n            \"galaxies and exoplanets\"\n        ]\n    \n        # Create test case in database\n        test_case = UnitTest(\n            test_id=uuid.uuid4(),\n            suite_id=suite.suite_id,\n            test_name=\"Article Summarization\",\n            test_type=\"summarization\",\n            test_description=\"Test summarization of a scientific article\",\n            input_data={\"article\": article},\n            expected_output={\"key_points\": key_points}\n        )\n        db_session.add(test_case)\n        db_session.commit()\n    \n        # Get summary from model\n>       response = await client.generate(\n            prompt=f\"Please summarize this article concisely: {article}\",\n            max_tokens=100,\n            temperature=0.3\n        )\n\ntests/test_summarization.py:54: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:88: in async_wrapped\n    return await fn(*args, **kwargs)\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/_asyncio.py:47: in __call__\n    do = self.iter(retry_state=retry_state)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AsyncRetrying object at 0x7f5b7d321040 (stop=<tenacity.stop.stop_after_attempt object at 0x7f5b7db80a90>, wait=<tenac...0x7f5b7d2bd730>, before=<function before_nothing at 0x7f5b7d2c0160>, after=<function after_nothing at 0x7f5b7d2c03a0>)>\nretry_state = <RetryCallState 140030889298384: attempt #3; slept for 3.0; last result: failed (HTTPStatusError Client error '403 For...nferencev1/chat/completions'\nFor more information check: https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/403)>\n\n    def iter(self, retry_state: \"RetryCallState\") -> t.Union[DoAttempt, DoSleep, t.Any]:  # noqa\n        fut = retry_state.outcome\n        if fut is None:\n            if self.before is not None:\n                self.before(retry_state)\n            return DoAttempt()\n    \n        is_explicit_retry = fut.failed and isinstance(fut.exception(), TryAgain)\n        if not (is_explicit_retry or self.retry(retry_state)):\n            return fut.result()\n    \n        if self.after is not None:\n            self.after(retry_state)\n    \n        self.statistics[\"delay_since_first_attempt\"] = retry_state.seconds_since_start\n        if self.stop(retry_state):\n            if self.retry_error_callback:\n                return self.retry_error_callback(retry_state)\n            retry_exc = self.retry_error_cls(fut)\n            if self.reraise:\n                raise retry_exc.reraise()\n>           raise retry_exc from fut.exception()\nE           tenacity.RetryError: RetryError[<Future at 0x7f5b7b811f40 state=finished raised HTTPStatusError>]\n\n/opt/hostedtoolcache/Python/3.9.21/x64/lib/python3.9/site-packages/tenacity/__init__.py:326: RetryError",
      "duration": 3.2260656720000043,
      "timestamp": "2025-01-20T22:23:48.870028"
    },
    {
      "test_name": "tests/test_summarization.py::test_multi_document_summarization",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.00027157599998872683,
      "timestamp": "2025-01-20T22:23:48.875643"
    },
    {
      "test_name": "tests/test_summarization.py::test_bullet_point_extraction",
      "outcome": "passed",
      "error_message": null,
      "duration": 0.00019330999998601328,
      "timestamp": "2025-01-20T22:23:48.877021"
    }
  ]
}